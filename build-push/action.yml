name: 'Docker Build and Push'
description: |
  Build and push Docker images to a container registry with multi-platform support, caching, 
  and image signing using cosign.

  The default versioning strategy uses semantic versioning based on Git tags, and tags images with the commit SHA on branch builds.
  
  For Signing the images, this action uses [cosign](https://github.com/sigstore/cosign) using GitHub OIDC tokens for authentication. 

  This action requires a GitHub token with the following permissions:
  ```yaml  
    permissions:
      contents: read
      id-token: write # Needed for OIDC authentication with cosign
  ```

author: EIDP

branding:
  icon: 'package'
  color: 'blue'

inputs:
  registry:
    description: 'Container registry to authenticate with'
    required: false
    default: 'ghcr.io'
  registry-username:
    description: 'Username for the container registry'
    required: false
    default: 'github'
  registry-password:
    description: 'Password for the container registry'
    required: false
    default: '${{ github.token }}'
  image:
    description: 'The image to build and push. This must include the registry URL. e.g. ghcr.io/owner/repo/image'
    required: true
    default: ''
  context:
    description: 'Build context for Docker. Typically the directory containing the Dockerfile.'
    required: false
    default: '.'
  dockerfile:
    description: 'Path to the Dockerfile'
    required: false
    default: 'Dockerfile'
  build_args:
    description: 'Additional build arguments for Docker'
    required: false
    default: ''
  platforms:
    description: 'Target platforms for the Docker image (e.g., linux/amd64,linux/arm64)'
    required: false
    default: 'linux/amd64,linux/arm64'
  additional_tags:
    description: 'Additional tags to apply to the image, separated by new lines. See the [docker/metadata-action](https://github.com/docker/metadata-action) documentation for supported tag formats.'
    required: false
    default: ''

outputs:
  tags:
    description: 'The tags of the pushed image. This includes the registry URL and image name and the tag.'
    value: '${{ steps.meta.outputs.tags }}'
  digest:
    description: 'The digest of the pushed image'
    value: '${{ steps.build-and-push.outputs.digest }}'

runs:
  using: 'composite'
  steps:
  - name: Set up QEMU
    uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

  - name: Install cosign
    uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

  - name: Log in to Container Registry
    uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
    with:
      registry: ${{ inputs.registry }}
      username: ${{ inputs.registry-username }}
      password: ${{ inputs.registry-password }}

  - name: Get commit SHA
    id: commit-sha
    uses: eidp/actions-common/commit-sha@52d95b8e0d9514475eae8f3284b968d5ce083807 # v0.6.0

  - name: Extract metadata
    id: meta
    uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
    with:
      images: ${{ inputs.image }}
      tags: |
        type=semver,pattern={{version}}
        type=raw,enable=${{ github.ref_type == 'branch' }},priority=200,prefix=,suffix=,value=${{ steps.commit-sha.outputs.short-sha }}
        ${{ inputs.additional_tags || '' }}

  - name: Build and push Docker image
    id: build-and-push
    uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
    with:
      context: ${{ inputs.context }}
      file: ${{ inputs.dockerfile }}
      build-args: ${{ inputs.build_args }}
      platforms: ${{ inputs.platforms }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      push: true
      sbom: true
      provenance: mode=max
      cache-from: type=gha
      cache-to: type=gha,mode=max

  - name: Sign the Docker image(s) with cosign
    shell: bash
    env:
      TAGS: ${{ steps.meta.outputs.tags }}
      DIGEST: ${{ steps.build-and-push.outputs.digest }}
    run: |
      for TAG in ${TAGS}; do
        IMAGE="${TAG}@${DIGEST}"
        echo "Signing image: ${IMAGE}"
        cosign sign --yes --recursive ${IMAGE}
      done
